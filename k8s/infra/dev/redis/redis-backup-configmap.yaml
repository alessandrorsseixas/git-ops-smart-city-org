apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-backup-config
  namespace: smartcity
  labels:
    app: redis
    component: backup
    environment: development
data:
  backup.sh: |
    #!/bin/bash
    set -e

    # Configuration
    BACKUP_DIR="/backup"
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    BACKUP_NAME="redis_backup_${TIMESTAMP}"
    BACKUP_FILE="${BACKUP_DIR}/${BACKUP_NAME}.rdb"

    # Redis connection details
    REDIS_HOST="${REDIS_HOST:-redis.smartcity.svc.cluster.local}"
    REDIS_PORT="${REDIS_PORT:-6379}"
    REDIS_PASSWORD="${REDIS_PASSWORD:-smartcity123}"

    echo "Starting Redis backup: $BACKUP_NAME"

    # Create backup directory if it doesn't exist
    mkdir -p "$BACKUP_DIR"

    # Trigger save command
    echo "Triggering Redis SAVE command..."
    redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" -a "$REDIS_PASSWORD" SAVE

    # Copy the RDB file
    echo "Copying RDB file..."
    kubectl cp "redis-0:/data/dump.rdb" "$BACKUP_FILE" -n smartcity

    echo "Backup completed: $BACKUP_FILE"

    # List existing backups and remove old ones (keep last 7 days)
    echo "Cleaning up old backups..."
    find "$BACKUP_DIR" -name "redis_backup_*.rdb" -mtime +7 -delete

    echo "Backup process completed successfully"

  restore.sh: |
    #!/bin/bash
    set -e

    # Configuration
    BACKUP_DIR="/backup"
    BACKUP_FILE="$1"

    if [ -z "$BACKUP_FILE" ]; then
      echo "Usage: $0 <backup_file>"
      echo "Available backups:"
      ls -la "$BACKUP_DIR"/redis_backup_*.rdb
      exit 1
    fi

    # Redis connection details
    REDIS_HOST="${REDIS_HOST:-redis.smartcity.svc.cluster.local}"
    REDIS_PORT="${REDIS_PORT:-6379}"
    REDIS_PASSWORD="${REDIS_PASSWORD:-smartcity123}"

    echo "Starting Redis restore from: $BACKUP_FILE"

    # Stop Redis
    echo "Stopping Redis..."
    redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" -a "$REDIS_PASSWORD" SHUTDOWN NOSAVE

    # Wait for Redis to stop
    sleep 5

    # Copy backup file to Redis pod
    echo "Copying backup file to Redis..."
    kubectl cp "$BACKUP_FILE" "redis-0:/data/dump.rdb" -n smartcity

    # Start Redis
    echo "Starting Redis..."
    kubectl exec redis-0 -n smartcity -- redis-server /etc/redis/redis.conf

    # Wait for Redis to start
    sleep 10

    # Verify restore
    echo "Verifying restore..."
    KEYS_COUNT=$(redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" -a "$REDIS_PASSWORD" DBSIZE)
    echo "Database has $KEYS_COUNT keys"

    echo "Restore completed successfully from: $BACKUP_FILE"

  health-check.sh: |
    #!/bin/bash

    # Redis connection details
    REDIS_HOST="${REDIS_HOST:-redis.smartcity.svc.cluster.local}"
    REDIS_PORT="${REDIS_PORT:-6379}"
    REDIS_PASSWORD="${REDIS_PASSWORD:-smartcity123}"

    # Check Redis health
    echo "Checking Redis health..."

    # Check if Redis is responding to PING
    if redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" -a "$REDIS_PASSWORD" ping | grep -q "PONG"; then
      echo "‚úÖ Redis is responding to PING"
    else
      echo "‚ùå Redis is not responding to PING"
      exit 1
    fi

    # Check memory usage
    MEMORY_INFO=$(redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" -a "$REDIS_PASSWORD" info memory)
    USED_MEMORY=$(echo "$MEMORY_INFO" | grep "used_memory:" | cut -d: -f2)
    USED_MEMORY_HUMAN=$(echo "$MEMORY_INFO" | grep "used_memory_human:" | cut -d: -f2)

    echo "üìä Memory usage: $USED_MEMORY_HUMAN ($USED_MEMORY bytes)"

    # Check connected clients
    CLIENTS_INFO=$(redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" -a "$REDIS_PASSWORD" info clients)
    CONNECTED_CLIENTS=$(echo "$CLIENTS_INFO" | grep "connected_clients:" | cut -d: -f2)

    echo "üë• Connected clients: $CONNECTED_CLIENTS"

    # Check database size
    DB_SIZE=$(redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" -a "$REDIS_PASSWORD" dbsize)
    echo "üóÑÔ∏è  Database size: $DB_SIZE keys"

    # Check replication status
    REPLICATION_INFO=$(redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" -a "$REDIS_PASSWORD" info replication)
    ROLE=$(echo "$REPLICATION_INFO" | grep "role:" | cut -d: -f2)

    echo "üîÑ Replication role: $ROLE"

    echo "‚úÖ Redis health check completed successfully"
