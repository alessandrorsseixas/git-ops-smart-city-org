apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: infrastructure-ingress
  namespace: infrastructure
  annotations:
    # Configurações básicas para Minikube
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
spec:
  ingressClassName: nginx
  rules:
  # PostgreSQL
  - host: postgres.dev.smartcity.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: postgres
            port:
              number: 5432

  # RabbitMQ Management
  - host: rabbitmq.dev.smartcity.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: rabbitmq
            port:
              number: 15672

  # Redis
  - host: redis.dev.smartcity.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: redis-master
            port:
              number: 6379

  # Prometheus
  - host: prometheus.dev.smartcity.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus-server
            port:
              number: 9090

  # ArgoCD
  - host: argocd.dev.smartcity.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: argocd-server
            port:
              number: 8080

  # Grafana (se instalado)
  - host: grafana.dev.smartcity.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 80

  # Keycloak (se instalado)
  - host: keycloak.dev.smartcity.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: keycloak
            port:
              number: 8080

  # MongoDB (se instalado)
  - host: mongodb.dev.smartcity.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mongodb
            port:
              number: 27017

  # Aplicação Smart City (exemplo)
  - host: app.dev.smartcity.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: smartcity-app
            port:
              number: 8080

  # API Gateway (exemplo)
  - host: api.dev.smartcity.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: smartcity-api
            port:
              number: 8080

  # Wildcard para subdomínios (catch-all)
  - host: "*.dev.smartcity.local"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: default-http-backend
            port:
              number: 80
---
# ConfigMap para configurações adicionais do Ingress Controller
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-ingress-config
  namespace: infrastructure
  labels:
    app.kubernetes.io/name: nginx-ingress
data:
  # Configurações TCP para serviços não-HTTP
  tcp-services: |
    5432: infrastructure/postgres:5432
    6379: infrastructure/redis-master:6379
    27017: infrastructure/mongodb:27017

  # Configurações UDP (se necessário)
  udp-services: |
    # Adicionar serviços UDP se necessário

  # Configurações gerais do NGINX
  use-forwarded-headers: "true"
  proxy-real-ip-cidr: "0.0.0.0/0"
  use-proxy-protocol: "false"
  server-tokens: "false"
  client-max-body-size: "50m"
  proxy-read-timeout: "300"
  proxy-send-timeout: "300"
  proxy-connect-timeout: "60"
---
# Service para TCP services (para serviços que não são HTTP)
apiVersion: v1
kind: Service
metadata:
  name: infrastructure-tcp-services
  namespace: infrastructure
spec:
  type: ClusterIP
  ports:
  # PostgreSQL
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP

  # Redis
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP

  # MongoDB
  - name: mongodb
    port: 27017
    targetPort: 27017
    protocol: TCP
---
# NetworkPolicy para controlar o tráfego
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: infrastructure-ingress-policy
  namespace: infrastructure
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  # Permitir tráfego do Ingress Controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 27017

  # Permitir tráfego interno do cluster
  - from:
    - podSelector: {}
    ports:
    - protocol: TCP
