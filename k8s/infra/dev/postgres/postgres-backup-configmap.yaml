apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-backup-config
  namespace: smartcity
  labels:
    app: postgres
    component: backup
    environment: development
data:
  backup.sh: |
    #!/bin/bash
    set -e

    # Configuration
    BACKUP_DIR="/backup"
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    BACKUP_NAME="postgres_backup_${TIMESTAMP}"
    BACKUP_FILE="${BACKUP_DIR}/${BACKUP_NAME}.sql.gz"

    # Database connection details
    DB_HOST="${POSTGRES_HOST:-postgres.dev.smartcity.local}"
    DB_PORT="${POSTGRES_PORT:-5432}"
    DB_NAME="${POSTGRES_DB:-smartcity}"
    DB_USER="${POSTGRES_USER:-smartcity}"
    DB_PASSWORD="${POSTGRES_PASSWORD:-smartcity123}"

    # Export password for pg_dump
    export PGPASSWORD="$DB_PASSWORD"

    echo "Starting PostgreSQL backup: $BACKUP_NAME"

    # Create backup directory if it doesn't exist
    mkdir -p "$BACKUP_DIR"

    # Perform backup
    pg_dump \
      --host="$DB_HOST" \
      --port="$DB_PORT" \
      --username="$DB_USER" \
      --dbname="$DB_NAME" \
      --no-password \
      --format=custom \
      --compress=9 \
      --verbose \
      --file="$BACKUP_FILE"

    echo "Backup completed: $BACKUP_FILE"

    # List existing backups and remove old ones (keep last 7 days)
    echo "Cleaning up old backups..."
    find "$BACKUP_DIR" -name "postgres_backup_*.sql.gz" -mtime +7 -delete

    echo "Backup process completed successfully"

  restore.sh: |
    #!/bin/bash
    set -e

    # Configuration
    BACKUP_DIR="/backup"
    BACKUP_FILE="$1"

    if [ -z "$BACKUP_FILE" ]; then
      echo "Usage: $0 <backup_file>"
      echo "Available backups:"
      ls -la "$BACKUP_DIR"/postgres_backup_*.sql.gz
      exit 1
    fi

    # Database connection details
    DB_HOST="${POSTGRES_HOST:-postgres.smartcity.svc.cluster.local}"
    DB_PORT="${POSTGRES_PORT:-5432}"
    DB_NAME="${POSTGRES_DB:-smartcity}"
    DB_USER="${POSTGRES_USER:-smartcity}"
    DB_PASSWORD="${POSTGRES_PASSWORD:-smartcity123}"

    # Export password for pg_restore
    export PGPASSWORD="$DB_PASSWORD"

    echo "Starting PostgreSQL restore from: $BACKUP_FILE"

    # Stop connections to database (optional, for clean restore)
    psql --host="$DB_HOST" --port="$DB_PORT" --username="$DB_USER" --dbname="postgres" \
      --command="SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '$DB_NAME' AND pid <> pg_backend_pid();"

    # Drop and recreate database
    psql --host="$DB_HOST" --port="$DB_PORT" --username="$DB_USER" --dbname="postgres" \
      --command="DROP DATABASE IF EXISTS $DB_NAME;"
    psql --host="$DB_HOST" --port="$DB_PORT" --username="$DB_USER" --dbname="postgres" \
      --command="CREATE DATABASE $DB_NAME;"

    # Restore from backup
    pg_restore \
      --host="$DB_HOST" \
      --port="$DB_PORT" \
      --username="$DB_USER" \
      --dbname="$DB_NAME" \
      --no-password \
      --verbose \
      --clean \
      --if-exists \
      --create \
      "$BACKUP_FILE"

    echo "Restore completed successfully from: $BACKUP_FILE"
