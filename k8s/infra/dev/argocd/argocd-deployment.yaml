apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-application-controller
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/part-of: argocd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-application-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-application-controller
    spec:
      serviceAccountName: argocd-application-controller
      containers:
      - name: argocd-application-controller
        image: quay.io/argoproj/argocd:v2.8.4
        imagePullPolicy: Always
        command:
        - argocd-application-controller
        args:
        - --status-processors=20
        - --operation-processors=10
        - --app-resync=180
        - --repo-server=argocd-repo-server:8081
        - --logformat=text
        - --loglevel=info
        - --metrics-port=8082
        ports:
        - name: metrics
          containerPort: 8082
          protocol: TCP
        env:
        - name: ARGOCD_CONTROLLER_REPLICAS
          value: "1"
        - name: ARGOCD_RECONCILIATION_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: argocd-cmd-params-cm
              key: controller.operation.processors
              optional: true
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8082
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8082
          initialDelaySeconds: 5
          periodSeconds: 10
          failureThreshold: 3
        volumeMounts:
        - name: argocd-repo-server-tls
          mountPath: /app/config/controller/tls
        - name: argocd-controller-tls
          mountPath: /app/config/tls
      volumes:
      - name: argocd-repo-server-tls
        secret:
          secretName: argocd-repo-server-tls
          optional: true
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
      - name: argocd-controller-tls
        secret:
          secretName: argocd-server-tls
          optional: true
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-dex-server
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/part-of: argocd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-dex-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-dex-server
    spec:
      serviceAccountName: argocd-dex-server
      containers:
      - name: dex
        image: ghcr.io/dexidp/dex:v2.37.0
        imagePullPolicy: Always
        command:
        - /shared/argocd-dex
        - rundex
        ports:
        - name: http
          containerPort: 5556
          protocol: TCP
        - name: grpc
          containerPort: 5557
          protocol: TCP
        - name: metrics
          containerPort: 5558
          protocol: TCP
        env:
        - name: ARGOCD_DEX_SERVER_DISABLE_TLS
          value: "false"
        resources:
          limits:
            cpu: 50m
            memory: 64Mi
          requests:
            cpu: 10m
            memory: 32Mi
        volumeMounts:
        - name: static-files
          mountPath: /shared
        - name: dex-config
          mountPath: /tmp/dex.yaml
          subPath: dex.yaml
        - name: argocd-dex-server-tls
          mountPath: /tmp/tls
      initContainers:
      - name: copyutil
        image: quay.io/argoproj/argocd:v2.8.4
        imagePullPolicy: Always
        command:
        - /bin/cp
        args:
        - /usr/local/bin/argocd
        - /shared/argocd-dex
        volumeMounts:
        - name: static-files
          mountPath: /shared
        resources:
          limits:
            cpu: 10m
            memory: 64Mi
          requests:
            cpu: 5m
            memory: 32Mi
      volumes:
      - name: static-files
        emptyDir: {}
      - name: dex-config
        configMap:
          name: argocd-dex-server-cm
      - name: argocd-dex-server-tls
        secret:
          secretName: argocd-dex-server-tls
          optional: true
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-notifications-controller
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-notifications-controller
    app.kubernetes.io/component: notifications-controller
    app.kubernetes.io/part-of: argocd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-notifications-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-notifications-controller
    spec:
      serviceAccountName: argocd-notifications-controller
      containers:
      - name: argocd-notifications-controller
        image: quay.io/argoproj/argocd:v2.8.4
        imagePullPolicy: Always
        command:
        - argocd-notifications
        args:
        - --loglevel=info
        - --logformat=text
        - --namespace=argocd
        - --argocd-repo-server=argocd-repo-server:8081
        - --secret-name=argocd-notifications-secret
        - --config-map-name=argocd-notifications-cm
        ports:
        - name: metrics
          containerPort: 9001
          protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: tls-certs
          mountPath: /app/config/tls
        - name: argocd-repo-server-tls
          mountPath: /app/config/reposerver/tls
      volumes:
      - name: tls-certs
        configMap:
          name: argocd-tls-certs-cm
      - name: argocd-repo-server-tls
        secret:
          secretName: argocd-repo-server-tls
          optional: true
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-redis
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-redis
    app.kubernetes.io/component: redis
    app.kubernetes.io/part-of: argocd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-redis
    spec:
      containers:
      - name: redis
        image: redis:7.0-alpine
        imagePullPolicy: Always
        args:
        - --save
        - ""
        - --appendonly
        - "no"
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-repo-server
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-repo-server
    app.kubernetes.io/component: repo-server
    app.kubernetes.io/part-of: argocd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-repo-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-repo-server
    spec:
      serviceAccountName: argocd-repo-server
      automountServiceAccountToken: false
      containers:
      - name: argocd-repo-server
        image: quay.io/argoproj/argocd:v2.8.4
        imagePullPolicy: Always
        command:
        - uid_entrypoint.sh
        args:
        - argocd-repo-server
        - --redis=argocd-redis:6379
        - --logformat=text
        - --loglevel=info
        - --port=8081
        - --metrics-port=8084
        ports:
        - name: server
          containerPort: 8081
          protocol: TCP
        - name: metrics
          containerPort: 8084
          protocol: TCP
        env:
        - name: ARGOCD_RECONCILIATION_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: argocd-cmd-params-cm
              key: reposerver.parallelism.limit
              optional: true
        resources:
          limits:
            cpu: 1000m
            memory: 1024Mi
          requests:
            cpu: 250m
            memory: 256Mi
        readinessProbe:
          httpGet:
            path: /healthz?full=true
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
          failureThreshold: 3
        volumeMounts:
        - name: ssh-known-hosts
          mountPath: /app/config/ssh
        - name: tls-certs
          mountPath: /app/config/tls
        - name: gpg-keys
          mountPath: /app/config/gpg/source
        - name: gpg-keyring
          mountPath: /app/config/gpg/keys
        - name: argocd-repo-server-tls
          mountPath: /app/config/reposerver/tls
        - name: tmp
          mountPath: /tmp
        - name: helm-working-dir
          mountPath: /helm-working-dir
        - name: plugins
          mountPath: /home/argocd/cmp-server/plugins
        - name: var-files
          mountPath: /var/run/argocd
      volumes:
      - name: ssh-known-hosts
        configMap:
          name: argocd-ssh-known-hosts-cm
      - name: tls-certs
        configMap:
          name: argocd-tls-certs-cm
      - name: gpg-keys
        configMap:
          name: argocd-gpg-keys-cm
      - name: gpg-keyring
        emptyDir: {}
      - name: argocd-repo-server-tls
        secret:
          secretName: argocd-repo-server-tls
          optional: true
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
      - name: tmp
        emptyDir: {}
      - name: helm-working-dir
        emptyDir: {}
      - name: var-files
        emptyDir: {}
      - name: plugins
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-server
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: argocd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-server
    spec:
      serviceAccountName: argocd-server
      containers:
      - name: argocd-server
        image: quay.io/argoproj/argocd:v2.8.4
        imagePullPolicy: Always
        command:
        - argocd-server
        args:
        - --staticassets=/shared/app
        - --repo-server=argocd-repo-server:8081
        - --dex-server=https://argocd-dex-server:5554
        - --logformat=text
        - --loglevel=info
        - --redis=argocd-redis:6379
        - --insecure
        ports:
        - name: server
          containerPort: 8080
          protocol: TCP
        - name: grpc
          containerPort: 8081
          protocol: TCP
        - name: metrics
          containerPort: 8083
          protocol: TCP
        env:
        - name: ARGOCD_SERVER_INSECURE
          valueFrom:
            configMapKeyRef:
              name: argocd-cmd-params-cm
              key: server.insecure
              optional: true
        - name: ARGOCD_SERVER_BASEHREF
          valueFrom:
            configMapKeyRef:
              name: argocd-cmd-params-cm
              key: server.basehref
              optional: true
        - name: ARGOCD_SERVER_ROOTPATH
          valueFrom:
            configMapKeyRef:
              name: argocd-cmd-params-cm
              key: server.rootpath
              optional: true
        - name: ARGOCD_SERVER_DEX_SERVER
          valueFrom:
            configMapKeyRef:
              name: argocd-cmd-params-cm
              key: server.dex.server
              optional: true
        - name: ARGOCD_SERVER_DISABLE_AUTH
          valueFrom:
            configMapKeyRef:
              name: argocd-cmd-params-cm
              key: server.disable.auth
              optional: true
        - name: ARGOCD_SERVER_ENABLE_PROXY_EXTENSION
          valueFrom:
            configMapKeyRef:
              name: argocd-cmd-params-cm
              key: server.enable.proxy.extension
              optional: true
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 125m
            memory: 128Mi
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 30
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 30
          failureThreshold: 3
        volumeMounts:
        - name: ssh-known-hosts
          mountPath: /app/config/ssh
        - name: tls-certs
          mountPath: /app/config/tls
        - name: argocd-repo-server-tls
          mountPath: /app/config/reposerver/tls
        - name: argocd-server-tls
          mountPath: /app/config/server/tls
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: ssh-known-hosts
        configMap:
          name: argocd-ssh-known-hosts-cm
      - name: tls-certs
        configMap:
          name: argocd-tls-certs-cm
      - name: argocd-repo-server-tls
        secret:
          secretName: argocd-repo-server-tls
          optional: true
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
      - name: argocd-server-tls
        secret:
          secretName: argocd-server-tls
          optional: true
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
      - name: tmp
        emptyDir: {}
